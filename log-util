import os
import sys
import uuid
import json
import logging
import inspect
import shutil
from pathlib import Path
import pytest
from functools import wraps
from pynamodb.models import Model

# ========= 控制开关 ============
ENABLE_CRUD_CAPTURE = False

def enable_crud():
    global ENABLE_CRUD_CAPTURE
    ENABLE_CRUD_CAPTURE = True

def disable_crud():
    global ENABLE_CRUD_CAPTURE
    ENABLE_CRUD_CAPTURE = False

# ========= 快照保存 ============
def save_snapshot(op, model_name, before, after, case_dir):
    if not ENABLE_CRUD_CAPTURE:
        return

    pynamodb_dir = os.path.join(case_dir, "pynamodb")
    os.makedirs(pynamodb_dir, exist_ok=True)

    data = {
        "operation": op,
        "model": model_name,
        "before": before,
        "after": after
    }
    fname = os.path.join(pynamodb_dir, f"{uuid.uuid4()}.json")
    with open(fname, "w") as f:
        json.dump(data, f, indent=2)

# ========= patch PynamoDB ============
def patch_pynamodb_methods(case_dir):
    def safe_copy(obj):
        try:
            obj.refresh()
            return obj.attribute_values.copy()
        except Exception:
            return None

    def patched_save(self, *args, **kwargs):
        before = safe_copy(self)
        result = original_save(self, *args, **kwargs)
        after = self.attribute_values.copy()
        save_snapshot("save", self.__class__.__name__, before, after, case_dir)
        return result

    def patched_delete(self, *args, **kwargs):
        before = safe_copy(self)
        result = original_delete(self, *args, **kwargs)
        save_snapshot("delete", self.__class__.__name__, before, None, case_dir)
        return result

    def patched_update(self, *args, **kwargs):
        before = safe_copy(self)
        result = original_update(self, *args, **kwargs)
        after = self.attribute_values.copy()
        save_snapshot("update", self.__class__.__name__, before, after, case_dir)
        return result

    original_save = Model.save
    original_delete = Model.delete
    original_update = Model.update

    Model.save = patched_save
    Model.delete = patched_delete
    Model.update = patched_update

# ========= patch lambda_handler ============
def wrap_lambda_handler(module):
    if not hasattr(module, "lambda_handler"):
        return

    original = module.lambda_handler

    if getattr(original, "_is_wrapped", False):
        return

    @wraps(original)
    def wrapped(event, context):
        enable_crud()
        try:
            return original(event, context)
        finally:
            disable_crud()

    wrapped._is_wrapped = True
    module.lambda_handler = wrapped

def patch_all_lambdas():
    for name, module in sys.modules.items():
        if name.startswith("lambdas."):
            wrap_lambda_handler(module)

# ========= 日志 ============
def setup_logger(case_dir):
    log_file = os.path.join(case_dir, "lambda_handler.log")
    os.makedirs(case_dir, exist_ok=True)

    logger = logging.getLogger()
    logger.setLevel(logging.INFO)

    # 清除旧 handler，避免重复输出
    while logger.handlers:
        logger.handlers.pop()

    handler = logging.FileHandler(log_file, mode='w', encoding='utf-8')
    formatter = logging.Formatter("%(asctime)s [%(levelname)s] %(message)s")
    handler.setFormatter(formatter)
    logger.addHandler(handler)

# ========= 测试用例排序（按代码顺序） ============
def pytest_collection_modifyitems(session, config, items):
    items.sort(key=lambda item: item.function.__code__.co_firstlineno)

def get_case_index(item):
    current_file = item.fspath
    all_items = [
        it for it in item.session.items
        if it.fspath == current_file
    ]
    sorted_items = sorted(all_items, key=lambda it: it.function.__code__.co_firstlineno)
    return sorted_items.index(item) + 1


# ========= 为每个用例设置独立 log + patch ============
def pytest_runtest_setup(item):
    # 创建 logs/目录结构
    test_file = Path(item.fspath).stem
    case_index = get_case_index(item)
    case_dir = os.path.join("logs", test_file, f"case{case_index}")
    item.case_dir = case_dir

    # 重建目录（干净）
    if os.path.exists(case_dir):
        shutil.rmtree(case_dir)
    os.makedirs(case_dir)

    # 设置日志、patch DB、patch handler
    setup_logger(case_dir)
    patch_pynamodb_methods(case_dir)
    patch_all_lambdas()
