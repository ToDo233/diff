import logging
import os
import json
import pytest
import requests
from functools import wraps

BASE_LOG_DIR = "logs"

CASE_LOG_MAP = {}
CASE_HTTP_LOG_MAP = {}
CASE_DIR_MAP = {}

def pytest_collection_modifyitems(session, config, items):
    file_case_count = {}

    items.sort(key=lambda item: item.function.__code__.co_firstlineno)

    for item in items:
        file_path = item.location[0]
        file_name = os.path.splitext(os.path.basename(file_path))[0]

        file_case_count[file_name] = file_case_count.get(file_name, 0) + 1
        case_num = file_case_count[file_name]

        # 每个 case 一个子目录
        case_dir = os.path.join(BASE_LOG_DIR, file_name, f"case{case_num}")
        os.makedirs(case_dir, exist_ok=True)

        log_file = os.path.join(case_dir, "log.log")
        http_log_file = os.path.join(case_dir, "http.json")

        CASE_LOG_MAP[item.nodeid] = log_file
        CASE_HTTP_LOG_MAP[item.nodeid] = http_log_file
        CASE_DIR_MAP[item.nodeid] = case_dir


# -------- 2. 设置普通日志 --------
def pytest_runtest_setup(item):
    log_path = CASE_LOG_MAP.get(item.nodeid)

    logger = logging.getLogger()
    logger.setLevel(logging.DEBUG)

    for handler in logger.handlers[:]:
        logger.removeHandler(handler)

    fh = logging.FileHandler(log_path, mode='w', encoding='utf-8')
    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
    fh.setFormatter(formatter)
    logger.addHandler(fh)

# -------- 3. 请求响应日志捕获 fixture（自动启用） --------
@pytest.fixture(autouse=True)
def capture_http(monkeypatch, request):
    logs = []

    original_request = requests.Session.request

    @wraps(original_request)
    def wrapped_request(self, method, url, **kwargs):
        entry = {
            "request": {
                "method": method,
                "url": url,
                "headers": dict(kwargs.get("headers", {})),
                "params": kwargs.get("params"),
                "json": kwargs.get("json"),
                "data": kwargs.get("data"),
            }
        }
        response = original_request(self, method, url, **kwargs)
        entry["response"] = {
            "status_code": response.status_code,
            "headers": dict(response.headers),
            "body": safe_text(response),
        }
        logs.append(entry)
        return response

    monkeypatch.setattr(requests.Session, "request", wrapped_request)

    yield  # 等待用例执行完

    # 保存到 JSON 文件
    http_log_path = CASE_HTTP_LOG_MAP.get(request.node.nodeid)
    with open(http_log_path, "w", encoding="utf-8") as f:
        json.dump(logs, f, indent=2, ensure_ascii=False)

# -------- 工具函数：处理响应体文本 --------
def safe_text(resp):
    try:
        return resp.text
    except Exception:
        return "<binary>"


# 快照保存路径
CASE_PYNAMODB_DIR_MAP = {}

# Hook pynamodb 方法
def patch_pynamodb_methods(snapshot_dir):

    def save_hook(self, *args, **kwargs):
        before = None
        try:
            self.refresh()
            before = self.attribute_values
        except Exception:
            pass  # new item

        result = original_save(self, *args, **kwargs)

        after = self.attribute_values
        save_snapshot(snapshot_dir, "save", self.__class__.__name__, before, after)
        return result

    def delete_hook(self, *args, **kwargs):
        try:
            before = self.attribute_values
        except Exception:
            before = None

        result = original_delete(self, *args, **kwargs)
        save_snapshot(snapshot_dir, "delete", self.__class__.__name__, before, None)
        return result

    def update_hook(self, *args, **kwargs):
        before = None
        try:
            self.refresh()
            before = self.attribute_values
        except Exception:
            pass

        result = original_update(self, *args, **kwargs)
        after = self.attribute_values
        save_snapshot(snapshot_dir, "update", self.__class__.__name__, before, after)
        return result

    def save_snapshot(path, op, model_name, before, after):
        snap = {
            "op": op,
            "model": model_name,
            "before": before,
            "after": after,
            "timestamp": datetime.utcnow().isoformat()
        }
        fname = os.path.join(path, f"pynamodb_{uuid.uuid4().hex}.json")
        with open(fname, "w", encoding="utf-8") as f:
            json.dump(snap, f, indent=2, default=str)

    # Monkey patch methods
    global original_save, original_delete, original_update
    original_save = Model.save
    original_delete = Model.delete
    original_update = Model.update

    Model.save = save_hook
    Model.delete = delete_hook
    Model.update = update_hook

# hook 所在用例路径
def pytest_runtest_setup(item):
    case_dir = CASE_DIR_MAP.get(item.nodeid)
    pynamodb_snap_dir = os.path.join(case_dir, "pynamodb")
    os.makedirs(pynamodb_snap_dir, exist_ok=True)
    CASE_PYNAMODB_DIR_MAP[item.nodeid] = pynamodb_snap_dir

    patch_pynamodb_methods(pynamodb_snap_dir)
